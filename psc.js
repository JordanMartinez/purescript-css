(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc version 0.6.9.3
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $colon = cons;
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var zero = function (dict) {
        return dict.zero;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var compare = function (dict) {
        return dict.compare;
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_8) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_7) {
                        return $$return(__dict_Monad_16)(_8(_7));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Ord: Ord, 
        Eq: Eq, 
        Ring: Ring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        compare: compare, 
        "==": $eq$eq, 
        negate: negate, 
        "-": $minus, 
        zero: zero, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "$": $dollar, 
        id: id, 
        ">>>": $greater$greater$greater, 
        "<<<": $less$less$less, 
        flip: flip, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showNumber: showNumber, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        eqString: eqString, 
        ordString: ordString, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Data_Profunctor = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Profunctor = function (dimap) {
        this.dimap = dimap;
    };
    var profunctorArr = new Profunctor(function (a2b) {
        return function (c2d) {
            return function (b2c) {
                return Prelude[">>>"](Prelude.semigroupoidArr)(a2b)(Prelude[">>>"](Prelude.semigroupoidArr)(b2c)(c2d));
            };
        };
    });
    return {
        Profunctor: Profunctor, 
        profunctorArr: profunctorArr
    };
})();
var PS = PS || {};
PS.Css_String = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var IsString = function (fromString) {
        this.fromString = fromString;
    };
    var fromString = function (dict) {
        return dict.fromString;
    };
    return {
        IsString: IsString, 
        fromString: fromString
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Extend = PS.Control_Extend;
    var Right = (function () {
        function Right(value0) {
            this.value0 = value0;
        };
        Right.create = function (value0) {
            return new Right(value0);
        };
        return Right;
    })();
    return {
        Right: Right
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    var semigroupMaybe = function (__dict_Semigroup_84) {
        return new Prelude.Semigroup(function (_97) {
            return function (_98) {
                if (_97 instanceof Nothing) {
                    return _98;
                };
                if (_98 instanceof Nothing) {
                    return _97;
                };
                if (_97 instanceof Just && _98 instanceof Just) {
                    return new Just(Prelude["<>"](__dict_Semigroup_84)(_97.value0)(_98.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var maybe = function (b) {
        return function (f) {
            return function (_91) {
                if (_91 instanceof Nothing) {
                    return b;
                };
                if (_91 instanceof Just) {
                    return f(_91.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var functorMaybe = new Prelude.Functor(function (fn) {
        return function (_92) {
            if (_92 instanceof Just) {
                return new Just(fn(_92.value0));
            };
            return Nothing.value;
        };
    });
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr));
    };
    var applyMaybe = new Prelude.Apply(function (_93) {
        return function (x) {
            if (_93 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_93.value0)(x);
            };
            if (_93 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    var bindMaybe = new Prelude.Bind(function (_95) {
        return function (k) {
            if (_95 instanceof Just) {
                return k(_95.value0);
            };
            if (_95 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    return {
        Nothing: Nothing, 
        Just: Just, 
        fromMaybe: fromMaybe, 
        maybe: maybe, 
        functorMaybe: functorMaybe, 
        applyMaybe: applyMaybe, 
        bindMaybe: bindMaybe, 
        semigroupMaybe: semigroupMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function drop (n) {  return function (l) {    return l.slice(n);  };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
    var sortBy = function (comp) {
        return function (xs) {
            var comp$prime = function (x) {
                return function (y) {
                    var _557 = comp(x)(y);
                    if (_557 instanceof Prelude.GT) {
                        return 1;
                    };
                    if (_557 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if (_557 instanceof Prelude.LT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return sortJS(comp$prime)(xs);
        };
    };
    var sort = function (__dict_Ord_87) {
        return function (xs) {
            return sortBy(Prelude.compare(__dict_Ord_87))(xs);
        };
    };
    var singleton = function (a) {
        return [ a ];
    };
    var semigroupArray = new Prelude.Semigroup(append);
    var mapMaybe = function (f) {
        return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
    };
    var functorArray = new Prelude.Functor(map);
    var monadArray = new Prelude.Monad(function () {
        return applicativeArray;
    }, function () {
        return bindArray;
    });
    var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyArray;
    });
    var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
        return functorArray;
    });
    var applicativeArray = new Prelude.Applicative(function () {
        return applyArray;
    }, singleton);
    return {
        sortBy: sortBy, 
        sort: sort, 
        concatMap: concatMap, 
        drop: drop, 
        append: append, 
        mapMaybe: mapMaybe, 
        map: map, 
        singleton: singleton, 
        functorArray: functorArray, 
        applyArray: applyArray, 
        applicativeArray: applicativeArray, 
        bindArray: bindArray, 
        monadArray: monadArray, 
        semigroupArray: semigroupArray
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidString = new Monoid(function () {
        return Prelude.semigroupString;
    }, "");
    var monoidMaybe = function (__dict_Semigroup_96) {
        return new Monoid(function () {
            return Data_Maybe.semigroupMaybe(__dict_Semigroup_96);
        }, Data_Maybe.Nothing.value);
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidString: monoidString, 
        monoidArray: monoidArray, 
        monoidMaybe: monoidMaybe
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    var uncurry = function (f) {
        return function (_203) {
            return f(_203.value0)(_203.value1);
        };
    };
    var snd = function (_202) {
        return _202.value1;
    };
    var functorTuple = new Prelude.Functor(function (f) {
        return function (_215) {
            return new Tuple(_215.value0, f(_215.value1));
        };
    });
    return {
        Tuple: Tuple, 
        uncurry: uncurry, 
        snd: snd, 
        functorTuple: functorTuple
    };
})();
var PS = PS || {};
PS.Control_Monad_Writer_Trans = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var WriterT = function (x) {
        return x;
    };
    var runWriterT = function (_254) {
        return _254;
    };
    var mapWriterT = function (f) {
        return function (m) {
            return WriterT(f(runWriterT(m)));
        };
    };
    var functorWriterT = function (__dict_Functor_232) {
        return new Prelude.Functor(function (f) {
            return mapWriterT(Prelude["<$>"](__dict_Functor_232)(function (_253) {
                return new Data_Tuple.Tuple(f(_253.value0), _253.value1);
            }));
        });
    };
    var applyWriterT = function (__dict_Monoid_236) {
        return function (__dict_Apply_237) {
            return new Prelude.Apply(function (f) {
                return function (v) {
                    return WriterT((function () {
                        var k = function (_255) {
                            return function (_256) {
                                return new Data_Tuple.Tuple(_255.value0(_256.value0), Prelude["<>"](__dict_Monoid_236["__superclass_Prelude.Semigroup_0"]())(_255.value1)(_256.value1));
                            };
                        };
                        return Prelude["<*>"](__dict_Apply_237)(Prelude["<$>"](__dict_Apply_237["__superclass_Prelude.Functor_0"]())(k)(runWriterT(f)))(runWriterT(v));
                    })());
                };
            }, function () {
                return functorWriterT(__dict_Apply_237["__superclass_Prelude.Functor_0"]());
            });
        };
    };
    var bindWriterT = function (__dict_Monoid_234) {
        return function (__dict_Monad_235) {
            return new Prelude.Bind(function (m) {
                return function (k) {
                    return WriterT(Prelude[">>="](__dict_Monad_235["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (_27) {
                        return Prelude[">>="](__dict_Monad_235["__superclass_Prelude.Bind_1"]())(runWriterT(k(_27.value0)))(function (_26) {
                            return Prelude["return"](__dict_Monad_235)(new Data_Tuple.Tuple(_26.value0, Prelude["<>"](__dict_Monoid_234["__superclass_Prelude.Semigroup_0"]())(_27.value1)(_26.value1)));
                        });
                    }));
                };
            }, function () {
                return applyWriterT(__dict_Monoid_234)((__dict_Monad_235["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]());
            });
        };
    };
    var applicativeWriterT = function (__dict_Monoid_238) {
        return function (__dict_Applicative_239) {
            return new Prelude.Applicative(function () {
                return applyWriterT(__dict_Monoid_238)(__dict_Applicative_239["__superclass_Prelude.Apply_0"]());
            }, function (a) {
                return WriterT(Prelude.pure(__dict_Applicative_239)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(__dict_Monoid_238))));
            });
        };
    };
    var monadWriterT = function (__dict_Monoid_225) {
        return function (__dict_Monad_226) {
            return new Prelude.Monad(function () {
                return applicativeWriterT(__dict_Monoid_225)(__dict_Monad_226["__superclass_Prelude.Applicative_0"]());
            }, function () {
                return bindWriterT(__dict_Monoid_225)(__dict_Monad_226);
            });
        };
    };
    return {
        WriterT: WriterT, 
        mapWriterT: mapWriterT, 
        runWriterT: runWriterT, 
        functorWriterT: functorWriterT, 
        applyWriterT: applyWriterT, 
        applicativeWriterT: applicativeWriterT, 
        bindWriterT: bindWriterT, 
        monadWriterT: monadWriterT
    };
})();
var PS = PS || {};
PS.Data_Profunctor_Strong = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Profunctor = PS.Data_Profunctor;
    var Data_Tuple = PS.Data_Tuple;
    var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
        this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
        this.first = first;
        this.second = second;
    };
    var strongArr = new Strong(function () {
        return Data_Profunctor.profunctorArr;
    }, function (a2b) {
        return function (_259) {
            return new Data_Tuple.Tuple(a2b(_259.value0), _259.value1);
        };
    }, Prelude["<$>"](Data_Tuple.functorTuple));
    var second = function (dict) {
        return dict.second;
    };
    return {
        Strong: Strong, 
        second: second, 
        strongArr: strongArr
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var intercalate = function (__dict_Foldable_277) {
        return function (__dict_Monoid_278) {
            return function (sep) {
                return function (xs) {
                    var go = function (_320) {
                        return function (x) {
                            if (_320.init) {
                                return {
                                    init: false, 
                                    acc: x
                                };
                            };
                            return {
                                init: false, 
                                acc: Prelude["<>"](__dict_Monoid_278["__superclass_Prelude.Semigroup_0"]())(_320.acc)(Prelude["<>"](__dict_Monoid_278["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                            };
                        };
                    };
                    return (foldl(__dict_Foldable_277)(go)({
                        init: true, 
                        acc: Data_Monoid.mempty(__dict_Monoid_278)
                    })(xs)).acc;
                };
            };
        };
    };
    var mconcat = function (__dict_Foldable_279) {
        return function (__dict_Monoid_280) {
            return foldl(__dict_Foldable_279)(Prelude["<>"](__dict_Monoid_280["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_280));
        };
    };
    var foldableArray = new Foldable(function (__dict_Monoid_289) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_289["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_289))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        intercalate: intercalate, 
        mconcat: mconcat, 
        foldMap: foldMap, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Char = PS.Data_Char;
    var Prelude = PS.Prelude;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Maybe = PS.Data_Maybe;
    
    function take(n) {
      return function(s) {
        return s.substr(0, n);
      };
    }
    ;
    
    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;
    return {
        drop: drop, 
        take: take
    };
})();
var PS = PS || {};
PS.Css_Selector = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_String = PS.Data_String;
    var Css_String = PS.Css_String;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Array = PS.Data_Array;
    var Id = (function () {
        function Id(value0) {
            this.value0 = value0;
        };
        Id.create = function (value0) {
            return new Id(value0);
        };
        return Id;
    })();
    var Class = (function () {
        function Class(value0) {
            this.value0 = value0;
        };
        Class.create = function (value0) {
            return new Class(value0);
        };
        return Class;
    })();
    var Attr = (function () {
        function Attr(value0) {
            this.value0 = value0;
        };
        Attr.create = function (value0) {
            return new Attr(value0);
        };
        return Attr;
    })();
    var AttrVal = (function () {
        function AttrVal(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        AttrVal.create = function (value0) {
            return function (value1) {
                return new AttrVal(value0, value1);
            };
        };
        return AttrVal;
    })();
    var AttrBegins = (function () {
        function AttrBegins(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        AttrBegins.create = function (value0) {
            return function (value1) {
                return new AttrBegins(value0, value1);
            };
        };
        return AttrBegins;
    })();
    var AttrEnds = (function () {
        function AttrEnds(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        AttrEnds.create = function (value0) {
            return function (value1) {
                return new AttrEnds(value0, value1);
            };
        };
        return AttrEnds;
    })();
    var Refinement = function (x) {
        return x;
    };
    var Star = (function () {
        function Star() {

        };
        Star.value = new Star();
        return Star;
    })();
    var Elem = (function () {
        function Elem(value0) {
            this.value0 = value0;
        };
        Elem.create = function (value0) {
            return new Elem(value0);
        };
        return Elem;
    })();
    var PathChild = (function () {
        function PathChild(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        PathChild.create = function (value0) {
            return function (value1) {
                return new PathChild(value0, value1);
            };
        };
        return PathChild;
    })();
    var Deep = (function () {
        function Deep(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Deep.create = function (value0) {
            return function (value1) {
                return new Deep(value0, value1);
            };
        };
        return Deep;
    })();
    var Selector = (function () {
        function Selector(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Selector.create = function (value0) {
            return function (value1) {
                return new Selector(value0, value1);
            };
        };
        return Selector;
    })();
    var $$with = function (_321) {
        return function (_322) {
            return new Selector(Prelude["++"](Data_Array.semigroupArray)(_321.value0)(_322), _321.value1);
        };
    };
    var star = new Selector([  ], Star.value);
    var isStringSelector = new Css_String.IsString(function (s) {
        var _597 = Data_String.take(1)(s);
        if (_597 === "#") {
            return new Selector([ Id.create(Data_String.drop(1)(s)) ], Star.value);
        };
        if (_597 === ".") {
            return new Selector([ Class.create(Data_String.drop(1)(s)) ], Star.value);
        };
        return new Selector([  ], new Elem(s));
    });
    var eqPredicate = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqPredicate)(a)(b);
        };
    }, function (_323) {
        return function (_324) {
            if (_323 instanceof Id && _324 instanceof Id) {
                return _323.value0 === _324.value0;
            };
            throw new Error("Failed pattern match");
        };
    });
    var ordPredicate = new Prelude.Ord(function () {
        return eqPredicate;
    }, function (_325) {
        return function (_326) {
            if (_325 instanceof Id && _326 instanceof Id) {
                return Prelude.compare(Prelude.ordString)(_325.value0)(_326.value0);
            };
            throw new Error("Failed pattern match");
        };
    });
    var element = function (e) {
        return new Selector([  ], new Elem(e));
    };
    var deep = function (a) {
        return function (b) {
            return new Selector([  ], new Deep(a, b));
        };
    };
    var $times$times = deep;
    var child = function (a) {
        return function (b) {
            return new Selector([  ], new PathChild(a, b));
        };
    };
    var $bar$greater = child;
    return {
        Selector: Selector, 
        Star: Star, 
        Elem: Elem, 
        PathChild: PathChild, 
        Deep: Deep, 
        Refinement: Refinement, 
        Id: Id, 
        Class: Class, 
        Attr: Attr, 
        AttrVal: AttrVal, 
        AttrBegins: AttrBegins, 
        AttrEnds: AttrEnds, 
        "with": $$with, 
        "|>": $bar$greater, 
        child: child, 
        "**": $times$times, 
        deep: deep, 
        element: element, 
        star: star, 
        eqPredicate: eqPredicate, 
        ordPredicate: ordPredicate, 
        isStringSelector: isStringSelector
    };
})();
var PS = PS || {};
PS.Css_Elements = (function () {
    "use strict";
    var Css_String = PS.Css_String;
    var Prelude = PS.Prelude;
    var Css_Selector = PS.Css_Selector;
    var body = Css_String.fromString(Css_Selector.isStringSelector)("body");
    return {
        body: body
    };
})();
var PS = PS || {};
PS.Data_Array_NonEmpty = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Array = PS.Data_Array;
    var Data_Array_Unsafe = PS.Data_Array_Unsafe;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Maybe = PS.Data_Maybe;
    var NonEmpty = (function () {
        function NonEmpty(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        NonEmpty.create = function (value0) {
            return function (value1) {
                return new NonEmpty(value0, value1);
            };
        };
        return NonEmpty;
    })();
    var $colon$bar = function (a) {
        return function (as) {
            return new NonEmpty(a, as);
        };
    };
    var toArray = function (_348) {
        return Prelude[":"](_348.value0)(_348.value1);
    };
    var singleton = function (a) {
        return new NonEmpty(a, [  ]);
    };
    var drop = function (_357) {
        return function (_358) {
            if (_357 === 0) {
                return toArray(_358);
            };
            if (_357 === 1) {
                return _358.value1;
            };
            return Data_Array.drop(_357 - 1)(_358.value1);
        };
    };
    return {
        NonEmpty: NonEmpty, 
        singleton: singleton, 
        drop: drop, 
        toArray: toArray, 
        ":|": $colon$bar
    };
})();
var PS = PS || {};
PS.Css_Property = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Profunctor_Strong = PS.Data_Profunctor_Strong;
    var Data_Monoid = PS.Data_Monoid;
    var Css_String = PS.Css_String;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Array_NonEmpty = PS.Data_Array_NonEmpty;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Array = PS.Data_Array;
    var Prefixed = (function () {
        function Prefixed(value0) {
            this.value0 = value0;
        };
        Prefixed.create = function (value0) {
            return new Prefixed(value0);
        };
        return Prefixed;
    })();
    var Plain = (function () {
        function Plain(value0) {
            this.value0 = value0;
        };
        Plain.create = function (value0) {
            return new Plain(value0);
        };
        return Plain;
    })();
    var Value = function (x) {
        return x;
    };
    var Key = function (x) {
        return x;
    };
    var Val = function (value) {
        this.value = value;
    };
    var value = function (dict) {
        return dict.value;
    };
    var valValue = new Val(Prelude.id(Prelude.categoryArr));
    var semigroupPrefixed = new Prelude.Semigroup(function (_370) {
        return function (_371) {
            if (_370 instanceof Plain && _371 instanceof Plain) {
                return Plain.create(_370.value0 + _371.value0);
            };
            if (_370 instanceof Plain && _371 instanceof Prefixed) {
                return Prefixed.create(Prelude["<$>"](Data_Array.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongArr)(Prelude["<>"](Prelude.semigroupString)(_370.value0)))(_371.value0));
            };
            if (_370 instanceof Prefixed && _371 instanceof Plain) {
                return Prefixed.create(Prelude["<$>"](Data_Array.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongArr)(Prelude["<>"](Prelude.semigroupString)(_371.value0)))(_370.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    var semigroupValue = new Prelude.Semigroup(function (_372) {
        return function (_373) {
            return Value(Prelude["<>"](semigroupPrefixed)(_372)(_373));
        };
    });
    var monoidPrefixed = new Data_Monoid.Monoid(function () {
        return semigroupPrefixed;
    }, new Plain(Data_Monoid.mempty(Data_Monoid.monoidString)));
    var monoidValue = new Data_Monoid.Monoid(function () {
        return semigroupValue;
    }, Data_Monoid.mempty(monoidPrefixed));
    var isStringPrefixed = new Css_String.IsString(Plain.create);
    var isStringValue = new Css_String.IsString(Prelude["<<<"](Prelude.semigroupoidArr)(Value)(Css_String.fromString(isStringPrefixed)));
    var valList = function (__dict_Val_341) {
        return new Val(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Foldable.intercalate(Data_Foldable.foldableArray)(monoidValue)(Css_String.fromString(isStringValue)(", ")))(Prelude["<$>"](Data_Array.functorArray)(value(__dict_Val_341))));
    };
    var valNonEmpty = function (__dict_Val_340) {
        return new Val(Prelude["<<<"](Prelude.semigroupoidArr)(value(valList(__dict_Val_340)))(Data_Array_NonEmpty.toArray));
    };
    var isStringKey = new Css_String.IsString(Prelude["<<<"](Prelude.semigroupoidArr)(Key)(Css_String.fromString(isStringPrefixed)));
    var cast = function (_369) {
        return _369;
    };
    return {
        Value: Value, 
        Key: Key, 
        Prefixed: Prefixed, 
        Plain: Plain, 
        Val: Val, 
        value: value, 
        cast: cast, 
        isStringPrefixed: isStringPrefixed, 
        semigroupPrefixed: semigroupPrefixed, 
        monoidPrefixed: monoidPrefixed, 
        isStringKey: isStringKey, 
        isStringValue: isStringValue, 
        semigroupValue: semigroupValue, 
        monoidValue: monoidValue, 
        valValue: valValue, 
        valList: valList, 
        valNonEmpty: valNonEmpty
    };
})();
var PS = PS || {};
PS.Css_Color = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Css_String = PS.Css_String;
    var Data_Foldable = PS.Data_Foldable;
    var $$Math = PS.$$Math;
    var Css_Property = PS.Css_Property;
    var Data_Monoid = PS.Data_Monoid;
    var Rgba = (function () {
        function Rgba(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        Rgba.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new Rgba(value0, value1, value2, value3);
                    };
                };
            };
        };
        return Rgba;
    })();
    var Other = (function () {
        function Other(value0) {
            this.value0 = value0;
        };
        Other.create = function (value0) {
            return new Other(value0);
        };
        return Other;
    })();
    var valColor = new Css_Property.Val(function (_375) {
        if (_375 instanceof Rgba && _375.value3 === 255) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Css_Property.Value)(Css_String.fromString(Css_Property.isStringPrefixed))("rgb(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")([ Prelude.show(Prelude.showNumber)(_375.value0), Prelude.show(Prelude.showNumber)(_375.value1), Prelude.show(Prelude.showNumber)(_375.value2) ]) + ")"));
        };
        if (_375 instanceof Rgba) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Css_Property.Value)(Css_String.fromString(Css_Property.isStringPrefixed))("rgba(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")([ Prelude.show(Prelude.showNumber)(_375.value0), Prelude.show(Prelude.showNumber)(_375.value1), Prelude.show(Prelude.showNumber)(_375.value2), Prelude.show(Prelude.showNumber)(_375.value3) ]) + ")"));
        };
        if (_375 instanceof Other) {
            return _375.value0;
        };
        throw new Error("Failed pattern match");
    });
    var rgb = function (r) {
        return function (g) {
            return function (b) {
                return new Rgba(r, g, b, 255);
            };
        };
    };
    var green = rgb(0)(128)(0);
    return {
        Rgba: Rgba, 
        Other: Other, 
        green: green, 
        rgb: rgb, 
        valColor: valColor
    };
})();
var PS = PS || {};
PS.Data_Identity = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Traversable = PS.Data_Traversable;
    var Identity = function (x) {
        return x;
    };
    var runIdentity = function (_473) {
        return _473;
    };
    var functorIdentity = new Prelude.Functor(function (f) {
        return function (_479) {
            return f(_479);
        };
    });
    var applyIdentity = new Prelude.Apply(function (_480) {
        return function (_481) {
            return _480(_481);
        };
    }, function () {
        return functorIdentity;
    });
    var bindIdentity = new Prelude.Bind(function (m) {
        return function (f) {
            return f(runIdentity(m));
        };
    }, function () {
        return applyIdentity;
    });
    var applicativeIdentity = new Prelude.Applicative(function () {
        return applyIdentity;
    }, Identity);
    var monadIdentity = new Prelude.Monad(function () {
        return applicativeIdentity;
    }, function () {
        return bindIdentity;
    });
    return {
        Identity: Identity, 
        runIdentity: runIdentity, 
        functorIdentity: functorIdentity, 
        applyIdentity: applyIdentity, 
        applicativeIdentity: applicativeIdentity, 
        bindIdentity: bindIdentity, 
        monadIdentity: monadIdentity
    };
})();
var PS = PS || {};
PS.Control_Monad_Writer_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_Monad_Error_Trans = PS.Control_Monad_Error_Trans;
    var Control_Monad_Maybe_Trans = PS.Control_Monad_Maybe_Trans;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Control_Monad_Reader_Trans = PS.Control_Monad_Reader_Trans;
    var Control_Monad_RWS = PS.Control_Monad_RWS;
    var Control_Monad_Error = PS.Control_Monad_Error;
    var Control_Monad_RWS_Trans = PS.Control_Monad_RWS_Trans;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Tuple = PS.Data_Tuple;
    var MonadWriter = function (listen, pass, writer) {
        this.listen = listen;
        this.pass = pass;
        this.writer = writer;
    };
    var writer = function (dict) {
        return dict.writer;
    };
    var tell = function (__dict_Monoid_518) {
        return function (__dict_Monad_519) {
            return function (__dict_MonadWriter_520) {
                return function (w) {
                    return writer(__dict_MonadWriter_520)(new Data_Tuple.Tuple(Prelude.unit, w));
                };
            };
        };
    };
    var monadWriterWriterT = function (__dict_Monoid_521) {
        return function (__dict_Monad_522) {
            return new MonadWriter(function (m) {
                return Control_Monad_Writer_Trans.WriterT(Prelude[">>="](__dict_Monad_522["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Trans.runWriterT(m))(function (_32) {
                    return Prelude["return"](__dict_Monad_522)(new Data_Tuple.Tuple(new Data_Tuple.Tuple(_32.value0, _32.value1), _32.value1));
                }));
            }, function (m) {
                return Control_Monad_Writer_Trans.WriterT(Prelude[">>="](__dict_Monad_522["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Trans.runWriterT(m))(function (_33) {
                    return Prelude["return"](__dict_Monad_522)(new Data_Tuple.Tuple(_33.value0.value0, _33.value0.value1(_33.value1)));
                }));
            }, Prelude["<<<"](Prelude.semigroupoidArr)(Control_Monad_Writer_Trans.WriterT)(Prelude["return"](__dict_Monad_522)));
        };
    };
    return {
        MonadWriter: MonadWriter, 
        tell: tell, 
        writer: writer, 
        monadWriterWriterT: monadWriterWriterT
    };
})();
var PS = PS || {};
PS.Control_Monad_Writer = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Identity = PS.Data_Identity;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Monoid = PS.Data_Monoid;
    var runWriter = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(Control_Monad_Writer_Trans.runWriterT);
    var execWriter = function (m) {
        return Data_Tuple.snd(runWriter(m));
    };
    return {
        execWriter: execWriter, 
        runWriter: runWriter
    };
})();
var PS = PS || {};
PS.Css_Stylesheet = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Writer = PS.Control_Monad_Writer;
    var Control_Monad_Writer_Class = PS.Control_Monad_Writer_Class;
    var Css_Property = PS.Css_Property;
    var Css_Selector = PS.Css_Selector;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Data_Identity = PS.Data_Identity;
    var Self = (function () {
        function Self(value0) {
            this.value0 = value0;
        };
        Self.create = function (value0) {
            return new Self(value0);
        };
        return Self;
    })();
    var Root = (function () {
        function Root(value0) {
            this.value0 = value0;
        };
        Root.create = function (value0) {
            return new Root(value0);
        };
        return Root;
    })();
    var Pop = (function () {
        function Pop(value0) {
            this.value0 = value0;
        };
        Pop.create = function (value0) {
            return new Pop(value0);
        };
        return Pop;
    })();
    var Child = (function () {
        function Child(value0) {
            this.value0 = value0;
        };
        Child.create = function (value0) {
            return new Child(value0);
        };
        return Child;
    })();
    var Sub = (function () {
        function Sub(value0) {
            this.value0 = value0;
        };
        Sub.create = function (value0) {
            return new Sub(value0);
        };
        return Sub;
    })();
    var Property = (function () {
        function Property(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Property.create = function (value0) {
            return function (value1) {
                return new Property(value0, value1);
            };
        };
        return Property;
    })();
    var Nested = (function () {
        function Nested(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Nested.create = function (value0) {
            return function (value1) {
                return new Nested(value0, value1);
            };
        };
        return Nested;
    })();
    var S = function (x) {
        return x;
    };
    var runS = function (_498) {
        return Control_Monad_Writer.execWriter(_498);
    };
    var rule = Prelude["<<<"](Prelude.semigroupoidArr)(S)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Monad_Writer_Class.tell(Data_Monoid.monoidArray)(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Data_Identity.monadIdentity))(Control_Monad_Writer_Class.monadWriterWriterT(Data_Monoid.monoidArray)(Data_Identity.monadIdentity)))(function (_0) {
        return Prelude[":"](_0)([  ]);
    }));
    var $qmark = function (sel) {
        return function (rs) {
            return rule(new Nested(new Sub(sel), runS(rs)));
        };
    };
    var key = function (__dict_Val_553) {
        return function (k) {
            return function (v) {
                return rule(new Property(Css_Property.cast(k), Css_Property.value(__dict_Val_553)(v)));
            };
        };
    };
    var functorStyleM = new Prelude.Functor(function (f) {
        return function (_499) {
            return S(Prelude["<$>"](Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity))(f)(_499));
        };
    });
    var applyStyleM = new Prelude.Apply(function (_500) {
        return function (_501) {
            return S(Prelude["<*>"](Control_Monad_Writer_Trans.applyWriterT(Data_Monoid.monoidArray)(Data_Identity.applyIdentity))(_500)(_501));
        };
    }, function () {
        return functorStyleM;
    });
    var bindStyleM = new Prelude.Bind(function (_502) {
        return function (f) {
            return S(Prelude[">>="](Control_Monad_Writer_Trans.bindWriterT(Data_Monoid.monoidArray)(Data_Identity.monadIdentity))(_502)(Prelude["<<<"](Prelude.semigroupoidArr)(function (_497) {
                return _497;
            })(f)));
        };
    }, function () {
        return applyStyleM;
    });
    return {
        S: S, 
        Property: Property, 
        Nested: Nested, 
        Self: Self, 
        Root: Root, 
        Pop: Pop, 
        Child: Child, 
        Sub: Sub, 
        "?": $qmark, 
        key: key, 
        rule: rule, 
        runS: runS, 
        functorStyleM: functorStyleM, 
        applyStyleM: applyStyleM, 
        bindStyleM: bindStyleM
    };
})();
var PS = PS || {};
PS.Css_Font = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Css_Stylesheet = PS.Css_Stylesheet;
    var Css_String = PS.Css_String;
    var Css_Property = PS.Css_Property;
    var Css_Color = PS.Css_Color;
    var Data_Array_NonEmpty = PS.Data_Array_NonEmpty;
    var GenericFontFamily = function (x) {
        return x;
    };
    var valGenericFontFamily = new Css_Property.Val(function (_505) {
        return _505;
    });
    var sansSerif = GenericFontFamily(Css_String.fromString(Css_Property.isStringValue)("sans-serif"));
    var fontFamily = function (a) {
        return function (b) {
            return Css_Stylesheet.key(Css_Property.valValue)(Css_String.fromString(Css_Property.isStringKey)("font-family"))(Css_Property.value(Css_Property.valNonEmpty(valGenericFontFamily))(b));
        };
    };
    var color = Css_Stylesheet.key(Css_Color.valColor)(Css_String.fromString(Css_Property.isStringKey)("color"));
    return {
        GenericFontFamily: GenericFontFamily, 
        fontFamily: fontFamily, 
        sansSerif: sansSerif, 
        color: color, 
        valGenericFontFamily: valGenericFontFamily
    };
})();
var PS = PS || {};
PS.Data_These = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Bitraversable = PS.Data_Bitraversable;
    var Data_Bifoldable = PS.Data_Bifoldable;
    var Data_Bifunctor = PS.Data_Bifunctor;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Tuple = PS.Data_Tuple;
    var This = (function () {
        function This(value0) {
            this.value0 = value0;
        };
        This.create = function (value0) {
            return new This(value0);
        };
        return This;
    })();
    var That = (function () {
        function That(value0) {
            this.value0 = value0;
        };
        That.create = function (value0) {
            return new That(value0);
        };
        return That;
    })();
    var Both = (function () {
        function Both(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Both.create = function (value0) {
            return function (value1) {
                return new Both(value0, value1);
            };
        };
        return Both;
    })();
    var semigroupThese = function (__dict_Semigroup_556) {
        return function (__dict_Semigroup_557) {
            return new Prelude.Semigroup(function (_510) {
                return function (_511) {
                    if (_510 instanceof This && _511 instanceof This) {
                        return new This(Prelude["<>"](__dict_Semigroup_556)(_510.value0)(_511.value0));
                    };
                    if (_510 instanceof This && _511 instanceof That) {
                        return new Both(_510.value0, _511.value0);
                    };
                    if (_510 instanceof This && _511 instanceof Both) {
                        return new Both(Prelude["<>"](__dict_Semigroup_556)(_510.value0)(_511.value0), _511.value1);
                    };
                    if (_510 instanceof That && _511 instanceof This) {
                        return new Both(_511.value0, _510.value0);
                    };
                    if (_510 instanceof That && _511 instanceof That) {
                        return new That(Prelude["<>"](__dict_Semigroup_557)(_510.value0)(_511.value0));
                    };
                    if (_510 instanceof That && _511 instanceof Both) {
                        return new Both(_511.value0, Prelude["<>"](__dict_Semigroup_557)(_510.value0)(_511.value1));
                    };
                    if (_510 instanceof Both && _511 instanceof This) {
                        return new Both(Prelude["<>"](__dict_Semigroup_556)(_510.value0)(_511.value0), _510.value1);
                    };
                    if (_510 instanceof Both && _511 instanceof That) {
                        return new Both(_510.value0, Prelude["<>"](__dict_Semigroup_557)(_510.value1)(_511.value0));
                    };
                    if (_510 instanceof Both && _511 instanceof Both) {
                        return new Both(Prelude["<>"](__dict_Semigroup_556)(_510.value0)(_511.value0), Prelude["<>"](__dict_Semigroup_557)(_510.value1)(_511.value1));
                    };
                    throw new Error("Failed pattern match");
                };
            });
        };
    };
    return {
        This: This, 
        That: That, 
        Both: Both, 
        semigroupThese: semigroupThese
    };
})();
var PS = PS || {};
PS.Css_Render = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Css_Stylesheet = PS.Css_Stylesheet;
    var Data_Array = PS.Data_Array;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Array_NonEmpty = PS.Data_Array_NonEmpty;
    var Data_Maybe = PS.Data_Maybe;
    var Css_Selector = PS.Css_Selector;
    var Css_Property = PS.Css_Property;
    var Data_Either = PS.Data_Either;
    var Data_These = PS.Data_These;
    var Sheet = function (x) {
        return x;
    };
    var Inline = function (x) {
        return x;
    };
    var semigroupInline = new Prelude.Semigroup(function (_531) {
        return function (_532) {
            return _531 + _532;
        };
    });
    var semigroupFile = new Prelude.Semigroup(function (_533) {
        return function (_534) {
            return _533 + _534;
        };
    });
    var selector$prime = function (_525) {
        return function (_526) {
            if (_525.length === 0 && _526 instanceof Css_Selector.Star) {
                return [ "*" ];
            };
            if (_525.length >= 1) {
                var _691 = _525.slice(1);
                if (_526 instanceof Css_Selector.Star) {
                    return [ "" ];
                };
            };
            if (_526 instanceof Css_Selector.Elem) {
                return [ _526.value0 ];
            };
            throw new Error("Failed pattern match");
        };
    };
    var properties = function (xs) {
        var sheetRules = function (_537) {
            if (_537 instanceof Data_Either.Right) {
                return Data_Foldable.mconcat(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ _537.value0.value0, ": ", _537.value0.value1 ]);
            };
            throw new Error("Failed pattern match");
        };
        return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("; ")(Prelude["<$>"](Data_Array.functorArray)(sheetRules)(xs));
    };
    var predicate = function (_529) {
        if (_529 instanceof Css_Selector.Id) {
            return "#" + _529.value0;
        };
        if (_529 instanceof Css_Selector.Class) {
            return "." + _529.value0;
        };
        if (_529 instanceof Css_Selector.Attr) {
            return "[" + (_529.value0 + "]");
        };
        if (_529 instanceof Css_Selector.AttrVal) {
            return "[" + (_529.value0 + ("='" + (_529.value1 + "']")));
        };
        if (_529 instanceof Css_Selector.AttrBegins) {
            return "[" + (_529.value0 + ("^='" + (_529.value1 + "']")));
        };
        if (_529 instanceof Css_Selector.AttrEnds) {
            return "[" + (_529.value0 + ("$='" + (_529.value1 + "']")));
        };
        throw new Error("Failed pattern match");
    };
    var selector = function (_524) {
        return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(Prelude["<$>"](Data_Array.functorArray)(function (_5) {
            return _5 + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(predicate)(Data_Array.sort(Css_Selector.ordPredicate)(_524.value0));
        })(selector$prime(_524.value0)(_524.value1)));
    };
    var nel = function (_530) {
        if (_530.length === 0) {
            return Data_Maybe.Nothing.value;
        };
        if (_530.length >= 1) {
            var _712 = _530.slice(1);
            return Data_Maybe.Just.create(Data_Array_NonEmpty[":|"](_530[0])(_712));
        };
        throw new Error("Failed pattern match");
    };
    var merger = function (_528) {
        if (_528.value0 instanceof Css_Stylesheet.Child) {
            return Data_Maybe.maybe(_528.value0.value0)(function (xs$prime) {
                return Css_Selector["|>"](merger(xs$prime))(_528.value0.value0);
            })(nel(_528.value1));
        };
        if (_528.value0 instanceof Css_Stylesheet.Sub) {
            return Data_Maybe.maybe(_528.value0.value0)(function (xs$prime) {
                return Css_Selector["**"](merger(xs$prime))(_528.value0.value0);
            })(nel(_528.value1));
        };
        if (_528.value0 instanceof Css_Stylesheet.Root) {
            return Data_Maybe.maybe(_528.value0.value0)(function (xs$prime) {
                return Css_Selector["**"](_528.value0.value0)(merger(xs$prime));
            })(nel(_528.value1));
        };
        if (_528.value0 instanceof Css_Stylesheet.Pop) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe(Css_Selector.element("TODO"))(merger))(Prelude["<<<"](Prelude.semigroupoidArr)(nel)(Data_Array_NonEmpty.drop(_528.value0.value0)))(Data_Array_NonEmpty[":|"](_528.value0)(_528.value1));
        };
        if (_528.value0 instanceof Css_Stylesheet.Self) {
            return Data_Maybe.maybe(Css_Selector["with"](Css_Selector.star)(_528.value0.value0))(function (xs$prime) {
                return Css_Selector["with"](merger(xs$prime))(_528.value0.value0);
            })(nel(_528.value1));
        };
        throw new Error("Failed pattern match");
    };
    var maybeThatSide = function (_523) {
        if (_523 instanceof Data_These.Both) {
            return new Data_Maybe.Just(_523.value1);
        };
        if (_523 instanceof Data_These.That) {
            return new Data_Maybe.Just(_523.value0);
        };
        if (_523 instanceof Data_These.This) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
    var getSheet = function (_521) {
        return _521;
    };
    var renderedSheet = function (_4) {
        return Prelude[">>="](Data_Maybe.bindMaybe)(_4)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](Data_Maybe.functorMaybe)(getSheet))(maybeThatSide));
    };
    var collect = function (_527) {
        var _729 = new Data_Tuple.Tuple(_527.value0, _527.value1);
        if (_729.value0 instanceof Css_Property.Plain && _729.value1 instanceof Css_Property.Plain) {
            return [ new Data_Either.Right(new Data_Tuple.Tuple(_729.value0.value0, _729.value1.value0)) ];
        };
        throw new Error("Failed pattern match");
    };
    var rule$prime = function (sel) {
        return function (props) {
            var p = Prelude[">>="](Data_Array.bindArray)(props)(collect);
            var q = Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_These.This.create)(Prelude["<<<"](Prelude.semigroupoidArr)(Inline)(Prelude["<<<"](Prelude.semigroupoidArr)(properties)(Data_Array_NonEmpty.toArray))))(nel(p));
            var o = function (sel$prime) {
                return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.Just.create)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_These.That.create)(Sheet))(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ selector(merger(sel$prime)), "{", properties(p), "}" ]));
            };
            return Data_Maybe.maybe(q)(o)(nel(sel));
        };
    };
    var rules = function (sel) {
        return function (rs) {
            var property = function (_535) {
                if (_535 instanceof Css_Stylesheet.Property) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(_535.value0, _535.value1));
                };
                return Data_Maybe.Nothing.value;
            };
            var topRules = rule$prime(sel)(Data_Array.mapMaybe(property)(rs));
            var nestedRules = function (a) {
                return rules(Prelude[":"](a)(sel));
            };
            var nested = function (_536) {
                if (_536 instanceof Css_Stylesheet.Nested) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(_536.value0, _536.value1));
                };
                return Data_Maybe.Nothing.value;
            };
            var nestedSheets = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(new Data_Maybe.Just(new Data_These.That(" ")))(Prelude["<$>"](Data_Array.functorArray)(Data_Tuple.uncurry(nestedRules))(Data_Array.mapMaybe(nested)(rs)));
            return Prelude["<>"](Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(topRules)(nestedSheets);
        };
    };
    var render = Prelude["<<<"](Prelude.semigroupoidArr)(rules([  ]))(Css_Stylesheet.runS);
    return {
        Sheet: Sheet, 
        Inline: Inline, 
        nel: nel, 
        predicate: predicate, 
        merger: merger, 
        properties: properties, 
        collect: collect, 
        "selector'": selector$prime, 
        selector: selector, 
        "rule'": rule$prime, 
        rules: rules, 
        render: render, 
        renderedSheet: renderedSheet, 
        maybeThatSide: maybeThatSide, 
        getSheet: getSheet, 
        semigroupInline: semigroupInline, 
        semigroupFile: semigroupFile
    };
})();
var PS = PS || {};
PS.Site = (function () {
    "use strict";
    var Css_Stylesheet = PS.Css_Stylesheet;
    var Css_Elements = PS.Css_Elements;
    var Prelude = PS.Prelude;
    var Css_Font = PS.Css_Font;
    var Data_Array_NonEmpty = PS.Data_Array_NonEmpty;
    var Css_Color = PS.Css_Color;
    var Data_Maybe = PS.Data_Maybe;
    var Css_Render = PS.Css_Render;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    
  function addStyleSheet (s) {
    return function () {
      var e = document.createElement('style');
      e.appendChild(document.createTextNode(s));
      document.head.appendChild(e);
    };
  }
  ;
    var style = Css_Stylesheet["?"](Css_Elements.body)(Prelude[">>="](Css_Stylesheet.bindStyleM)(Css_Font.fontFamily([  ])(Data_Array_NonEmpty.singleton(Css_Font.sansSerif)))(function () {
        return Css_Font.color(Css_Color.green);
    }));
    var main = Prelude["<<<"](Prelude.semigroupoidArr)(addStyleSheet)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.fromMaybe(""))(Css_Render.renderedSheet))(Css_Render.render(style));
    return {
        main: main, 
        style: style, 
        addStyleSheet: addStyleSheet
    };
})();
PS.Site.main();


},{}]},{},[1])